1. FindBookName result = FindBookName(driver); -> FindBookName findBookName = FindBookName(driver);

2. Date date2 = ticket.departueDate(); -> Date departueDate = ticket.departueDate();

3. public void EnterValues(String c1, String c2, String d1, String d2) {
     this.city1 = c1;
     this.city2 = c2;
     this.date1 = d1;
     this.date2 = d2;
   }

4. retStrDate.setDate("12/10/2017");

5. 
    public int getValue(int[] a) {
        int d = a[0];
        for (int i = 0; i < a.length; i++) {
            if (a[i] > d) {
                d = a[i];
            }
        }
        return d;
    }
    
    
    public int getMaxIntegerValueFromArray(int[] array) {
        int maxValue = array[0];
        for (int i = 0; i < array.length; i++) {
            if (array[i] > maxValue) {
                maxValue = array[i];
            }
        }
        return maxValue;
    }

6.

USE:
- follow code conversion;
- use comprehensive names;
- java convention:
     i and j for loops;
     ALL_CAPS for constants;
     ClassFromCapital;
     methodOrVariable;
     name of class - noun;
     method names should start with verb e.g. get, set, do;
     package name should follow standard company structure e.g. com.company.project.module

     
AVOID:
- magic naumbers;
- hungarian notation;
- abbreviations;
- x,y,z or another letters apart i/j;
- file2, sum1;
- unclear "flag", "result", "status" / "Instance", "Entity"
- God class/Magic Hammer (huge button pattern)
- data storage class (constants class)
- numbers like "Test2"
- "MyClass"

=================================================================================

Class and method size: Big classes and long methods tend to be more brittle.
Repetitive code (candidate for refactoring)
Variable and method scopes (private vs public)
Use of good design patterns (if possible)
Especially if you're doing TDD or disciplined unit testing, look for interfaces for most major classes; this makes it easier to build mock objects and to change implementations later.
Javadocs meet standards.
"Fluent" method names, that is, you want to be able to read the methods as sentences. "if object is initialized" should read
	if(obj.isInitialized())".
Comments reflect what the code does.
Code does what's expected.


In general, look for aggregation over implementing interfaces, and interfaces over inheritance.
http://sergeyteplyakov.blogspot.com/2012/12/vs-vs.html (следует предпочесть агрегацию наследованию, предпочитайте агрегацию вместо композиции)
https://habr.com/ru/post/325478

=================================================================================

- Throw an exception when things go wrong
List<String> getSearchResults(...) {
  try {
    List<String> results = // make REST call to search service
    return results;
  } catch (RemoteInvocationException e) {
    return Collections.emptyList();
  }
}

- Use the most specific type possible (Более того, в некоторых случаях имеет смысл использовать класс-враппер над типом, вместо самого типа. Например, вместо String phoneNumber лучше сделать враппер-класс PhoneNumber с единственным полем String value. Для перечислимых типов по возможности используйте enums.)

void doOperation(String opType, Data data); 
// where opType is "insert", "append", or "delete", this should have clearly been an enum

String fetchWebsite(String url);
// where url is "https://google.com", this should have been an URN

String parseId(Input input);
// the return type is String but ids are actually Longs like "6345789"

=================================================================================


Absolute name
parser.parse(new FileReader("/home/vital/IdeaProjects/Perevozka/src/Tarif.json"));

Not obviously
if (km<=10&km>=1)

catch (Exception ex) {
   System.out.println("Error"); --- ??
}
  
public class Perevozka {
     Perevozka() {
         Scanner scan = new Scanner (System.in); -- logic in constuctor
         int chislo = scan.nextInt();
         if (chislo>0)
            km = chislo;
         else
            System.out.println ("Vvedite pravilnoe chislo");
     }
     
     
static long MAX_VALUE -> A constant holding the maximum value a long can have, 2^63-1.     
         2`147`483`647    -> Integer.MAX_VALUE
9`223`372`036`854`775`807 -> Long.MAX_VALUE 

In Java 64-bit, long and double values were treated as two 32-bit values. That means, a 64-bit write operation is basically performed as two separate 32-bit operations.
https://dzone.com/articles/longdouble-are-not-atomic-in-java
    
long creditCardNumber = 1234_5678_9012_3456L;
long socialSecurityNumber = 999_99_9999L;
float pi =  3.14_15F;
long hexBytes = 0xFF_EC_DE_5E;
long hexWords = 0xCAFE_BABE;
long maxLong = 0x7fff_ffff_ffff_ffffL;
byte nybbles = 0b0010_0101;
long bytes = 0b11010010_01101001_10010100_10010010;
    
    
long result;
if (km<=10&km>=1)
    result = (Long) jsonObject.get("1-10");
    

for (Object koefItem : jsonArray) { Object -> JSONObject
     JSONObject item = (JSONObject) koefItem;


public void setKoef() { --> name, magic button, every time reading file
        try {
            File fXmlFile = new File(filePath);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("group");
            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
                Element eElement = (Element) nNode;
                double start = Double.parseDouble(eElement.getElementsByTagName("start").item(0).getTextContent());
                double end = Double.parseDouble(eElement.getElementsByTagName("end").item(0).getTextContent());
                double koef = Double.parseDouble(eElement.getElementsByTagName("koef").item(0).getTextContent());
                if (this.weight >= start & this.weight < end) {
                    this.koef = koef;
                }
            }
            if (this.koef == 0) {
                System.out.println("max Weight can be 5000kg, min weight 1 kg");
            }
        } catch (ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
        }



public class ReadingFile { --- where reading file?
    public String filePath (String fileName) throws IOException {
        return  Objects.requireNonNull(getClass().getClassLoader().getResource(fileName)).getPath();
    }
}


this.distanc = scanSet("Enter distance"); ---> where is distancE


private Scanner scan;

    {   ----> initializing block
        scan = new Scanner(System.in);
    }

- Статический блок инициализатора будет вызываться при загрузке класса и не будет иметь доступа к переменным или методам экземпляра. Oн часто используется для создания статических переменных.
- Нестатический блок инициализатора, с другой стороны, создается только при построении объекта, будет иметь доступ к переменным и методам экземпляра и (согласно важной поправке, предложенной @EJP), будет вызываться в начале конструктора, после того, как супер конструктор был вызван (явно или неявно) и перед вызовом любого другого последующего кода конструктора. Я видел, как он использовался, когда класс имеет несколько конструкторов и нуждается в том же коде инициализации, который требуется для всех конструкторов. Как и в случае с конструкторами, вы должны избегать вызова не конечных методов в этом блоке. Позволяют проводить инициализацию объектов вне зависимости от того, какой конструктор был вызван или, например, вести журналирование:

class Foo {
	static List<Character> abc;
	static {
		abc = new LinkedList<Character>();
		for (char c = 'A'; c <= 'Z'; ++c) {
			abc.add( c );
		}
	}
}

Map<String, String> map = new HashMap<String, String>() {{
	put("паук",  "арахнид");
	put("птица", "архозавр");
	put("кит",   "зверь");
}};



именования и непонятно о чем речь
ScannerDeliveryParams param = new ScannerDeliveryParams();
CreateDeliveryKoef item = new DeliveryKoefXmlImpl(param.getWeight(), "koef.xml");
CountDeliveryCost count = new CountDeliveryCost(param.getDistanc(), param.getWeight(), item);


DataItem data = new DataItem();
data = getData();

LOGGER.info("Calculation process");  -- ??
BigDecimal calcResult = calculator.calculate(dataItem);
System.out.println("The total price is " + calcResult); --??

    private BigDecimal getInform(String message){
        System.out.println(message);
        try{
            return scanner.nextBigDecimal();
        }
        catch (IllegalArgumentException | NullPointerException err){
            LOGGER.error(ERROR_MESSAGE, err );
        }
        return null;  --??
    }


    private BigDecimal receiveScale(Map<String,BigDecimal> map , BigDecimal weight){
       try{
           if(weight.floatValue() <= 5){
               return  map.get("min.weight");
           } else if(weight.floatValue() > 5 && weight.floatValue() <= 10 ){
               return  map.get("normal.value");
           } else {
               return map.get("max.value");
           }
       }
       catch (NullPointerException err){  --???
           LOGGER.error(ERROR_MESSAGE, err);
       }
       return null; --> ???


        return properties.entrySet().stream().collect(
                Collectors.toMap(e -> String.valueOf(e.getKey()),
                        e -> new BigDecimal(e.getValue().toString()))); --> debug
			
public class PropertyReader implements Reader<String, BigDecimal> {  -- PropertyFileReader
    @Override
    public Map<String, BigDecimal> getMap(String path) throws IOException {  -- what is Map			
			

    public static void setWeight(float weight) {
        DeliveryInformImpl.weight = weight;
        if (weight <= 0 ) {
            throw new IllegalArgumentException("The value can't be negative");
        }
    }
    
    
    public class CalculatorImpl implements Calculator {
    @Override
    public double CalculateCost(double weight, double distance) {
        FileInputStream fis; -- file in calc class?
	
	
	
    class Delivery {
      private double weight;
      private double distance;
      Delivery() {  -- empty constructor
      }
      
    
    getTotalCost.java -- name
    
    
    final BigDecimal weight = getValueByKey(properties, WEIGHT);
    final BigDecimal distance = getValueByKey(properties, DISTANCE);
    final BigDecimal price = getValueByKey(properties, PRICE);
    final BigDecimal minprice = getValueByKey(properties, MINPRICE);
    final BigDecimal midprice = getValueByKey(properties, MIDPRICE);
    final BigDecimal maxprice = getValueByKey(properties, MAXPRICE);
    final double mincost = weight.doubleValue()* distance.doubleValue()* minprice.doubleValue();
    
    
    final String errorMessage = "Failed to read file from path [" + PATH + "]";
    throw new PropertyExeption(errorMessage);
    
    
    public DeliveryData(BigDecimal weight, BigDecimal distance, BigDecimal coefficient) {
        if (weight.signum() <= 0 || distance.signum() <= 0 || coefficient.signum() < 0) { -- in constructor?
            throw new IllegalArgumentException("Parameters can't be negative or zero");
        }
        this.coefficient = coefficient;
        this.weight = weight;
        this.distance = distance;
    }
    
    
    public void setCoefficient(BigDecimal coefficient) { -- in set???
        if (coefficient.signum() <= 0) {
            throw new IllegalArgumentException("The coefficient can't be negative");
        }
        this.coefficient = coefficient;
    }
    
    
    private BigDecimal selectPriceValue(Map<String, BigDecimal> valuesMap, BigDecimal weight) {
        if (weight.doubleValue() < 15) {  ---> hardcoded values
            return valuesMap.get("coef.min");
        } else if (weight.doubleValue() >= 15 && weight.doubleValue() < 30) {
            return valuesMap.get("coef.middle");
        } else {
            return valuesMap.get("coef.max");
        }
    }
   
    


======

public final Department addDepartment(final Department department) {
     Assert.notNull(department, "department cannot be null");
     assert department != null

Утверждения не должны использоваться для проверки аргументов в публичных методах по следующим причинам:

утверждения могут быть отключены, и проверки аргументов никогда не должны быть отключены, поскольку они 
являются частью контракта метода со своими вызывающими абонентами.

Ошибки утверждения не вызывают соответствующее исключение для недопустимых аргументов.
Пример:

    /**
     * @throws ArithmeticException if divisor is zero
     */ 
    public void int divide(int divisor) {
        if (divisor == 0) {
            throw new ArithmeticException("Cannot divide by zero");
        }
        ...
    }
Если вы использовали здесь утверждение, его можно было бы отключить, и он выбрал бы 
AssertionFailedException, который бесполезен и неинформирован.

--ea[:...|:] or enableassertions  (to enable assertion at a particular package and class level)
--da[:...|:] or disableassertions (to disable assertion on a package or class level)
--esa or enablesystemassertions  (for enabling system assertion)
--dsa or disablesystemassertions (for disabling system assertion)

https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html

======

department.setDescription(resultSet.getString(2 + 1)); -- ???

======

public final Department getDepartmentById(final int departmentId) {
        SqlParameterSource namedParameters = new MapSqlParameterSource("departmentId", departmentId);
        try {
            Department department = namedParameterJdbcTemplate.queryForObject(GET_DEPARTMENT_BY_ID_SQL,
                            namedParameters, new DepartmentRowMapper());
            return department;
        } catch (EmptyResultDataAccessException e) { -- ???
            return null;
        }
    }

======

@Override
    public Department addDepartment(Department department) {
        MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();
        mapSqlParameterSource.addValue("departmentName", department.getDepartmentName());
        mapSqlParameterSource.addValue("description", department.getDescription());
        namedParameterJdbcTemplate.update(ADD_DEPARTMENT_SQL, mapSqlParameterSource);
        Department added_department = getDepartmentByName(department.getDepartmentName()); -- ???
        return added_department;
    }

======

private class Queries { -- ???
    private static final String GET_DEPARTMENTS_SQL = "SELECT departmentId, departmentName, description FROM department";
    private static final String GET_DEPARTMENT_BY_ID_SQL =
            "SELECT departmentId, departmentName, description "
                    + "FROM department WHERE departmentId = :departmentId";
    private static final String ADD_DEPARTMENT_SQL = "INSERT INTO department (departmentName, description) "
                    + "VALUES (:departmentName, :description)";
    private static final String UPDATE_DEPARTMENT_SQL =
            "UPDATE department SET departmentName = :departmentName, "
                    + "description = :description "
                    + "WHERE departmentId = :departmentId";
    private static final String DELETE_DEPARTMENT_SQL = "DELETE FROM department WHERE departmentId = :departmentId";
}

======

public Department addDepartment(Department department) {
        Integer depId = (Integer) new SimpleJdbcInsert (jdbcTemplate).
                withTableName("department").usingGeneratedKeyColumns("departmentId").
                executeAndReturnKey(new BeanPropertySqlParameterSource(department));
        return getDepartmentById(depId); -- ???
}

======

@Test(expected = org.springframework.dao.EmptyResultDataAccessException.class)
public void deleteDepartment() {
    Department department = departmentDao.getDepartmentById(1);
    Assert.assertEquals("Distribution", department.getDepartmentName());
    departmentDao.deleteDepartmentById(1);
    departmentDao.getDepartmentById(1);
}

======

    @Rule
    public final ExpectedException exception = ExpectedException.none();

    @Test
    public void deleteDepartmentByID() {
        departmentDao.deleteDepartmentByID(2);
        exception.expect(EmptyResultDataAccessException.class);
        departmentDao.getDepartmentByID(2);
    }
    
    http://blog.qatools.ru/junit/junit-rules-tutorial

======

    @Override
    public Department addDepartment(Department department) {
        if (getDepartmentByName(department.getDepartmentName()) != null)
            return null;
        else {
            SqlParameterSource namedParametres = new MapSqlParameterSource("department_name", department.getDepartmentName());
            ((MapSqlParameterSource) namedParametres).addValue("description", department.getDescription());
            namedParameterJdbcTemplate.execute(add_department_sql, namedParametres, new PreparedStatementcallback());
            return department;
        }
    }
    
    
    @Override
    public boolean removeDepartmentById(int departmentid) {
        SqlParameterSource namedParametres = new MapSqlParameterSource("department_id", departmentid);
        Object o = namedParameterJdbcTemplate.execute(remove_department_by_id_sql, namedParametres, new PreparedStatementcallback());
        if ((Integer) o == 1)
            return true;
        else
            return false;
    }    

======


