Continuous delivery (непрерывная доставка)

В большинстве случаев непрерывная доставка — это серия практик, направленных на то, 
чтобы обновления программного обеспечения происходили практически постоянно. 
Данные методы гарантируют быстрое развёртывание на продакшене не меняя существующий функционал.
Непрерывная доставка осуществима благодаря различным оптимизациям на ранних этапах процесса разработки.

Разработчик, сделав какую-либо фичу, отправляет её QA-инженерам для тестирования. 
Тестировщикам легче досконально оттестировать небольшой новый функционал и написать к нему тест-кейсы. 
Как только все проверки – прошли, новая фича попадает на дальнейшее тестирование авто-тестами и потом уже в 
релизный брэнч в системе контроля версий.

Continuous delivery поставляет бизнесу каждый функционал постепенно. 
Это позволяет получить сразу отклик от клиента и, при необходимости, сделать некоторые изменения.

Другие преимущества Continuous delivery:
  Внесение нового функционала в back-end для проверки совместимости с системой;
  Быстрое реагирование на потребности рынка;
  Возможность подстраивания под изменение бизнес-стратегии;
  Низкое количество потенциальных ошибок.



Continuous deployment(непрерывное развёртываение)

Continuous deployment часто путают с continuous delivery, хотя между ними существуют чёткие различия, 
которые следует знать и понимать.

Как выше было уже сказано непрерывная доставка обеспечивает постоянный выпуск обновлений пользователям. 
А непрерывное развёртывание отвечает за то, чтобы весь новый функционал после тестирования сразу же попал 
в основную программу без ручного вмешательства инженеров DevOps.

Тот же Docker создан для неприрывного развёртывания. DevOps инженеры могут обновлять контейнеры и разворачивать их 
сразу на продакшене в автоматическом режиме. Такой процесс является ключом к непрерывной доставке, т.к. весь 
процесс может занять всего лишь несколько минут.

Не всегда непрерывное развёртывание имеет смысл.
Использование фича-тоглинга сводит на нет все преимущества. 
Всегда надо исходить из потребностей бизнеса и процессов внедрения нового функционала.



Continuous integration (непрерывная интеграция)

Непрерывная интеграция является ключевым компонентом практики Agile Development. 
Основой данной практики является постоянное попадание кода в центральный репозиторий после успешного запуска тестов. 
Основные цели continuous integration – поиск и устранение потенциальных проблем как можно быстрее, 
улучшение качества ПО и сокращение время для выпуска обновлений.

До того, как непрерывная интеграция стала широко распространённой, разработчики обычно работали изолировано, 
а только по окончанию работы объедениняли свои наработки. Порой это был очень трудоёмкий и длительный процесс.

При непрерывной интеграции разработчики часто заливают свои изменения в центральный репозиторий, 
выполняя до этого unit – тесты. Затем система контроля версий автоматически проверяет код на возможно 
безопасной интеграции с существующим в репозитории. При этом идёт постоянное поступление кода, 
что облегчает тестирование и сводит к минимуму возможные риски.


Идеальный процесс выглядит примерно так:
  - разработчик отправляет код в центральный репозиторий;
  - на сервере непрерывной интеграции изменения объединяются с основным кодом, выполняются юнит – тесты и всё 
  заливается на стэйжинг среду;
  - в стэйжинг среде QA инженеры тестируют приложение;
  - дальше всё проверяется для попадания на продакшен;
  - развёртывание на продакшене.
